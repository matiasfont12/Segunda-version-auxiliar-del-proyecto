Login, Register, Logout

Login: Lo primero es darle una direccion por medio de url, y creando un template que vamos a crear en nuestra aplicacion Indice
y en este template, vamos a usar herencia y bloques, como veniamos haciendo

Esta informacion la vamos a pasar en metodo post para mayor seguridad, para eso la vamos a pasar tambien como form por medio de un input o buton
el formulario que vamos a usar sera el form.as_p, que es un formulario default de django

Una vez que tenemos el template, trabajamos en el url, pero en la aplicacion en donde hicimos el template (Indice). 
Finalmente vamos a crearle la vista y vamos a darle un espacio en nuestro index.html

Una vez que tenemos todo creado, en las vistas vamos a llamar a from django.contrib.auth import login, authenticate y from django.contrib.auth.forms import AuthenticationForm
Estas son las dos funciones que vamos a usar para logearnos

La particularidad es que, estamos llamando a una funcion login, y nuestra vista tambien se llama login, podemos cambiar el nombre de la vista o tambien renombrar la funcion.
Nosotros vamos a renombrar la funcion llamandola: from django.contrib.auth import login as django_login, authenticate 

Una vez que llamamos a estas dos funcionalidades, tenemos que ver como las vamos a usar.
Las vamos a usar de la siguiente manera, llamandola en nuestra vista segun el orden, pero tambien vamos a trabajar con los datos de este formulario
y para eso lo trataremos como post.

En el formulario, usamos el AuthenticationForm, y se lo pasamos con un request, y con un pedido de data llamando al request.POST, para dejar pasar el metodo
Luego, si la informacion es correcta, que cree un usuario y una contraseña con la informacion correcta
Si la informacion no es vacia, registra la informacion y da el acceso. En caso contrario no lo hara


Ahora vamos a trabajar el logout, que es un poco mas simple que el login

Logout:

Para trabajar el logout, lo unico que necesitamos es crear su url, trabajarla como una clase basada en vista, dandole indicaciones y trabajar su template.
En nuestra url vamos a traer from django.contrib.auth.views import LogoutView, y esto nosotros lo vamos a utilizar dentro de nuestra url
Logout.View.as_view(), la vamos a trabajar como una vista predeterminada, y dentro le vamos a pasar parametros de nuestro template para que lo reconozca.
Logout.View.as_view(template_name= "Indice/logout.html", name= "logout). Ya con esto tenemos nuestro logout creado.

Register:

Para trabajar el register es similar, vamos a crear su url, pero tambien su vista, ya que necesita mas cosas
Lo tratamos como cualquier formulario, solamente que a la hora de configurar el save y el cleaned data, no tenemos que darselo uno por uno ya que guarda informacion automaticamente

Este formulario que nosotros creamos, por default tiene condiciones dadas, lo que nosotros queremos es que no se muestren en pantalla, si no que esten explicitas.
Para limpiar esto lo que vamos a realizar es crear un formulario en nuestra aplicacion, y trabajarlo
Dentro del formulario que creamos, primero vamos a importar el formulario, y luego vamos a importar el UserCreationForm
y este UserCreationForm lo vamos a dar como parametro en la clase que trabajemos en nuestro formulario
en lo que trabajemos, tenemos que incluir tanto un forms.Charfield() y dentro del Charfield vamos a dar las indicaciones que nostros quisieramos.
Lo vamos a hacer usando un label=, y ademas vamos a usar un widget=
El widget= es un adaptador que le damos al Charfield, ya que el Charfield toma por defecto un campo de texto, y con el widget lo que hace es funcionar como adaptador 
a este widget le damos un forms.Passwordinput(), esto es para que el campo pida una contraseña para funcionar

Luego tenemos que configurar que cierta informacion se maneje con formularios.
Para eso usamos el class Meta: funciona para ocultar cierta informacion de nuestro formulario, en donde el usuario no tiene el alcance de ver
a este class meta tenemos que indicarle los campos que va a trabajar, y tambien le vamos a indicar que oculte los requisitos que pide el formulario para crear un usuario.

class meta:
model = A este usuario lo tenemos que importar con el User (from.django.contrib.auth.models import User)
fields= Vamos a indicar que campos debe trabajar como una lista, ["email", "password", "password2"]
help_texts= Aca vamos a hacer que se oculten los requisitos del formulario. Esta funcion toma por defecto un diccionario:

Especificamente, lo podemos trabajar con List Comprehension, que es un metodo for en donde con argumentos podemos crear diccionarios, tuplas, listas etc.

k: " " for k in fields = Lo que hacemos es, pasarle un valor para que trabaje, y luego el valor en los campos.
Usamos especificamente la K ya que hacemos mencion a las keys

Luego de esto debemos usar nuestro formulario. Para eso reemplazamos este formulario en nuestras vistas, importandolo.

cuando lo sustituimos, y en nuestra pagina queremos registrarnos, nos va a tirar un error, ya que no le estamos pasando el Username.
Entonces lo que vamos a hacer, es borrarle el username que le estabamos pasando, y pasarlo por default en nuestro formulario. Asi no crea usuarios fantasmas
De otra parte se crearian modelos erroneos y nosotros no podriamos acceder a ellos desde la administracion.

Ahora que tenemos el logout, login y register, lo que tenemos que tener en cuenta es poder limitar las personas para ejecutar operaciones solamente si estan registradas.

Para esto usamos decoradores y mixin

Decoradores: Se usan para limitar las vistas planas, como las que creamos en views.
Mixin: Son clases que limitan el acceso a las clases basadas en vistas.

Para usar decoradores, lo que hacemos llamar from.django.contrib.auth.decorators import login_required.
Este login_required lo usamos con un @ arriba de las vistas.

@login_required

Entonces, cuando una persona que no este logeada, acceda a la vista, le va a saltar un error de pagina no disponible.
Para que esto no le aparezca, tenemos que indicarle al decorador donde debe acceder para poder logearse
Esto lo hacemos en nuestros settings, en la carpeta de nuestro proyecto

en nuestro archivo settings: escribimos LOGIN_URL = /'login/', y esto direcciona directamente al usuario a que se loguee antes de usar una vista.

Para usar mixin, debemos llamar from.django.contrib.auth.mixin import LoginRequiredMixin, y a este atributo lo vamos a poner dentro de los parametros de las clases basadas en vistas
Muy importante que este parametro siempre vaya primero. de caso contrario no funciona.


Edicion de usuario:

Para trabajar la edicion del usuario, lo haremos mediante un formulario y un template
Nosotros habiamos creado un form para registrarse, usaremos uno similar para crear el template. Solamente que el formulario lo trataremos como una tabla.

Luego de esto vamos a crear la url y su vista.

Vamos a tratar el formulario:
En nuestro formulario vamos a hacer que se nos permita cargar ciertos datos mas.
Entre ellos teniamos, email y contraseñas, ahora vamos a añadir nombre y apellido. con first_name y last_name, delimitandolo con charfield
y a estos parametros los indicamos en la clase meta.

El tema es que si dejamos esto asi, nos dice que necesitamos informacion para que se completen los campos del formulario.
Para eso agregamos como delimitante required=False, esto indica que puede no cargarse y enviar informacion de todas maneras

Ahora en nuestra vista lo que vamos a agregar, es que no cualquiera pueda editar esta informacion. Si no solamente gente que este logeada.
Para esto le agregamos un decorador

Ahora, la estructura del formulario va a ser similar a la anterior, solamente que este lo usamos para que el usuario edite sus datos, entonces sera un poco mas corto.
Pero en si, tenemos que tener en cuenta que debe pedir la informacion para funcionar desde el mismo request
Esta informacion la pedimos por medio del request.user. y esto funciona asi ya que cuando nos logeamos estamos aportando la informacion que necesita para trabajar, entonces hace el llamado de informacion desde archivo.
Y si la informacion que entra es valida, que se limpie y que se pueda obtener mediante un get, aca en este caso es conveniente usar un get en vez de un filter ya que estamos pidiendo algo especifico y no va a explotar, ya que sabemos que lo que pedimos esta.
asi es como pedimos los atributos que indicamos en el formulario, en especial las contraseñas no pueden tener espacios, si o si su atributo tiene que pedir contraseña.
y despues de todo esto, podemos indicar un request.user.save() para que se guarde.

Esta es una manera de trabajar este formulario, tambien lo podemos usar con: loged_user = request.user e ir indicando logued_user."atributos" en todo los atributos

El problema aca, es que si le pasamos password1 y 2, no las va a poder guardar ya que no es un atributo que tenga el usuario.
Entonces para evitar esto, en vez de heredar desde el UserCreationForm, podemos heredar de nuestro propio formulario, atribuyendo como parametro form.Forms y borrando a su vez la class meta.
y tambien vamos a borrar en nuestra vista el pedido de password1 y 2. Pero nosotros necesitamos de esas contraseñas, entonces lo vamos a trabajar con condicionales

Le vamos a decir que si al obtener las contraseñas, la primer contraseña comparada con la segunda contraseña son mayores a 8, que cree una nueva contraseña usando el set_password()


Ahora lo que vamos a identificar, es identificar cuando uno esta logueado o no segun el template, ya que desloguearse y editar el usuario no tienen sentido que aparezcan en nuestra pagina
Entonces esto es lo que vamos a modificar.
para eso vamos a usar condicionales en nuestro template padre index

en el el condicional que vamos a usar, sera el if y el else como bloque; con el parametro if request.user.is_authenticated
y tambien vamos a hacer que la informacion predeterminada quede guardada para que la modifique el usuario en el formulario, esto lo vamos a realizar como lo hicimos antes com el initial y tratandolo como un diccionario.

Avatar:

Para trabajar el avatar lo haremos desde el archivo de models, y llamar al from django.contrib.auth.models import User, con esto lo que vamos a hacer es trabajar algunos detalles para el usuario.

Lo primero que vamos a trabajar sera el avatar: creamos el atributo y llamamos a models.ImageField(upload_to=", null= True, blank=True)
Lo que le indicamos en el parametro es, donde se tiene que cargar la imagen, que se haga desde una carga vacia y en blanco.

Lo curioso es que al hacer esto nos tira un error de pip install pillow, nos dice que no tenemos pillow instalado. Vamos a proceder a instalarlo con pip install Pillow, cuando se instala lo guardamos en nuestro registro de paquetes con pip freeze > requirements.txt

Ahora debemos hacer que nuestro user se conecte con el avatar: para eso creamos la variable user y llamamos a un ForeingKey, en donde como atributo le vamos a dar User para conectarlo, on_delete para que cuando ese usuario que se conecta se borre, se haga de una forma en especial.

Si nosotros creamos un usuario que se carga una foto de perfil, queda en el admin, y si borramos el usuario la imagen queda conectada a un administrador que no existe. Para eso cuando usamos un ForeingKey debemos indicar que queremos que se haga con el objeto que estamos creando

al on_delete le agregamos un models.CASCADE, que lo que hace es indicarle al modelo un tipo de borrado.
Por ej, existen 3 tipos de borrados: SET_NULL, que lo que hace es mantener el avatar pero el campo user quedar vacio, con el DO_NOTHING, el avatar queda conectado al usuario aunque no existe, y con el CASCADE se borra todo lo que este relacionado al usuario. 

Luego de crearlo reaizamos un makemigrations para confirmar lo que hicimos y luego una migrate para cargar los datos en la base de datos

En nuestro index, como hicimos con el editar y el logout, vamos a dar la condicion que aparezca nuestra imagen, y para esto la debemos cargar.

En nuestro admin, escribimos admin.site.register(Avatar), le pasamos el modelo y cuando lo implementa, por las dudas correjimos el form Indice.models import Avatar borrando el indice para que no genere problemas

Ahora, si nosotros vamos a nuestra administracion, vemos que nos deja añadir un avatar seleccionando una foto, pero si lo hacemos y vamos a ese link, nos tira error

Para arreglar esto debemos ir a settings y dentro del setting del proyecto arreglar dos campos para utilizar en el url del proyecto.

agregamos MEDIA_URL = '/media/', ademas debemos pasarle una ubicacion del archivo, para esto tambien añadimos MEDIA_ROOT = os
el os es una variable de entorno para trabajar el OperationSystem, debemos importarlo facilmente con import os

Al os le tenemos que decir que nos use un determinado path junto a un join, porque lo que hace es unir una direccion entera con una acotada: La direccion entera es el BASE_DIR que es la url de todo nuestro proyecto y en donde esta subido, junto a MEDIA_URL que es la porcion que indicamos de la foto
Esto lo hacemos para conectar ambas cosas: pero vamos a juntarlo junto a 'media'

Listo, ya cargamos la foto, ahora debemos identificar en donde va a acceder nuestra aplicacion para ver esa imagen que guardamos

Para esto vamos a ir a nuestra url del proyecto y vamos a importar from django.conf import settings y
from django.conf.url.static import static.

y agregamos esto a un nuevo urlpatterns pero con suma +=

urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) 

En donde le cargamos la configuracion a la url

Entonces, si vamos a django nuestra foto ya funciona, lo unico que falta es hacerla visible en nuestra pagina



